{"version":3,"file":"./index.js","mappings":"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","sources":["webpack://spatial-id-svc-base/webpack/bootstrap","webpack://spatial-id-svc-base/webpack/runtime/define property getters","webpack://spatial-id-svc-base/webpack/runtime/hasOwnProperty shorthand","webpack://spatial-id-svc-base/./src/error.ts","webpack://spatial-id-svc-base/../../node_modules/textlinestream/dist/textlinestream.es.mjs","webpack://spatial-id-svc-base/./src/fetch.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/** REST API ラッパーのエラー基底クラス */\nexport class ApiBaseError extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = 'ApiBaseError';\n    }\n}\n/** REST API のリクエスト関連のエラー */\nexport class ApiDomError extends ApiBaseError {\n    constructor(message, name = 'ApiDomError', options) {\n        super(message, options);\n        this.name = name;\n    }\n}\n/** REST API の HTTP ステータスコード検証エラー */\nexport class ApiHttpStatusError extends ApiBaseError {\n    constructor(message, status, options) {\n        super(message, options);\n        this.status = status;\n        this.name = 'ApiHttpStatusError';\n    }\n}\n/** REST API の認証関連エラー */\nexport class ApiAuthError extends ApiHttpStatusError {\n    constructor(message, options) {\n        super(message, 401, options);\n        this.name = 'ApiAuthError';\n    }\n}\n/** REST API レスポンスのペイロード関連のエラー */\nexport class ApiResponseError extends ApiBaseError {\n    constructor() {\n        super(...arguments);\n        this.name = 'ApiResponseError';\n    }\n}\n/** REST API レスポンスのストリーム処理の際のエラー */\nexport class ApiStreamError extends ApiResponseError {\n    constructor(message, error, options) {\n        super(message, options);\n        this.error = error;\n        this.name = 'ApiStreamError';\n    }\n}\n/** REST API のレスポンスペイロード responseHeader 内 status の検証エラー */\nexport class ApiCommonStatusError extends ApiResponseError {\n    constructor(message, responseHeader, options) {\n        super(message, options);\n        this.responseHeader = responseHeader;\n        this.name = 'ApiCommonStatusError';\n    }\n}\n","// Vendored from Deno - \n// https://github.com/denoland/deno_std/blob/main/streams/delimiter.ts\n// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n\n/** Transform a stream into a stream where each chunk is divided by a newline,\n * be it `\\n` or `\\r\\n`. `\\r` can be enabled via the `allowCR` option.\n *\n * ```ts\n * import { TextLineStream } from \"./delimiter.ts\";\n * const res = await fetch(\"https://example.com\");\n * const lines = res.body!\n *   .pipeThrough(new TextDecoderStream())\n *   .pipeThrough(new TextLineStream());\n * ```\n */\nclass TextLineStream extends TransformStream {\n  #buf = \"\";\n  #allowCR = false;\n  #returnEmptyLines = false;\n  #mapperFun = line => line;\n  \n  constructor(options) {\n    super({\n      transform: (chunk, controller) => this.#handle(chunk, controller),\n      flush: (controller) => this.#handle(\"\\r\\n\", controller),\n    });\n    \n    this.#allowCR = options?.allowCR ?? false;\n    this.#returnEmptyLines = options?.returnEmptyLines ?? false;\n    this.#mapperFun = options?.mapperFun ?? this.#mapperFun;\n  }\n\n  #handle(chunk, controller) {\n    chunk = this.#buf + chunk;\n\n    for (;;) {\n      const lfIndex = chunk.indexOf(\"\\n\");\n\n      if (this.#allowCR) {\n        const crIndex = chunk.indexOf(\"\\r\");\n\n        if (\n          crIndex !== -1 && crIndex !== (chunk.length - 1) &&\n          (lfIndex === -1 || (lfIndex - 1) > crIndex)\n        ) {\n          const curChunk = this.#mapperFun(chunk.slice(0, crOrLfIndex));\n          if (this.#returnEmptyLines || curChunk) {            \n            controller.enqueue(curChunk);\n          }\n          chunk = chunk.slice(crIndex + 1);\n          continue;\n        }\n      }\n\n      if (lfIndex !== -1) {\n        let crOrLfIndex = lfIndex;\n        if (chunk[lfIndex - 1] === \"\\r\") {\n          crOrLfIndex--;\n        }\n        const curChunk = this.#mapperFun(chunk.slice(0, crOrLfIndex));\n        if (this.#returnEmptyLines || curChunk) {          \n          controller.enqueue(curChunk);\n        }\n        chunk = chunk.slice(lfIndex + 1);\n        continue;\n      }\n\n      break;\n    }\n\n    this.#buf = chunk;\n  }\n}\n\nexport { TextLineStream as default };\n","/// <reference path=\"../../../types/textlinestream.d.ts\" />\nimport TextLineStream from 'textlinestream';\nimport { ApiAuthError, ApiCommonStatusError, ApiDomError, ApiHttpStatusError, ApiResponseError, ApiStreamError, } from './error';\nconst doFetch = async (params) => {\n    const headers = {};\n    const req = { method: params.method, headers };\n    if (params.payload !== undefined) {\n        req.body = JSON.stringify(params.payload);\n        headers['Content-Type'] = 'application/json';\n    }\n    if (params.authInfo !== undefined) {\n        headers['Grpc-Metadata-username'] = params.authInfo.username;\n        headers['Grpc-Metadata-token'] = params.authInfo.token;\n    }\n    if (params.headers !== undefined) {\n        Object.assign(headers, params.headers);\n    }\n    if (params.abortSignal !== undefined) {\n        req.signal = params.abortSignal;\n    }\n    let resp;\n    try {\n        resp = await fetch(params.baseUrl + params.path, req);\n    }\n    catch (e) {\n        if (e instanceof DOMException) {\n            throw new ApiDomError(e.message, e.name);\n        }\n        throw new ApiDomError('unexpected fetch result');\n    }\n    if (resp.status === 401) {\n        throw new ApiAuthError('failed to authenticate: token might be invalid');\n    }\n    if (!resp.ok) {\n        throw new ApiHttpStatusError('failed to fetch response: invalid http status code', resp.status);\n    }\n    return resp;\n};\n/**\n * JSON API をコールする。\n * 成功系応答 (ステータス 200 番台) でなかったときは例外を発生させる。\n * @param params 引数オブジェクト\n * @returns レスポンスペイロードのパース済み JSON オブジェクト\n */\nexport const fetchRawJson = async (params) => {\n    const resp = await doFetch(params);\n    try {\n        const json = (await resp.json());\n        return json;\n    }\n    catch (e) {\n        throw new ApiResponseError('failed to parse as json');\n    }\n};\n/**\n * JSON ストリーム API をコールする。\n * 成功系応答 (ステータス 200 番台) でなかったときは例外を発生させる。\n * @param params 引数オブジェクト\n * @returns レスポンスペイロードのパース済み JSON オブジェクトの async generator\n */\nexport const fetchRawJsonStream = async function* (params) {\n    const resp = await doFetch(params);\n    const stream = resp.body.pipeThrough(new TextDecoderStream()).pipeThrough(new TextLineStream());\n    const reader = stream.getReader();\n    while (true) {\n        const chunk = await reader.read();\n        if (chunk.done) {\n            break;\n        }\n        let parsed;\n        try {\n            parsed = JSON.parse(chunk.value);\n        }\n        catch (e) {\n            throw new ApiResponseError('failed to parse as json');\n        }\n        if (parsed.error !== undefined) {\n            throw new ApiStreamError('response has an error', parsed.error);\n        }\n        yield parsed;\n    }\n};\n/**\n * レスポンスペイロードに responseHeader を持つ API をコールする。\n * fetchJsonRaw に加え、.responseHeader.status が 0 以外のときに例外を発生させる。\n * @param params 引数オブジェクト\n * @returns\n */\nexport const fetchJson = async (params) => {\n    const resp = await fetchRawJson(params);\n    let status;\n    try {\n        status = resp.responseHeader.status;\n    }\n    catch (e) {\n        throw new ApiResponseError('failed to get resp.responseHeader.status');\n    }\n    if (status !== 0) {\n        throw new ApiCommonStatusError(`invalid status: ${status}`, resp.responseHeader);\n    }\n    return resp;\n};\n/**\n * レスポンスペイロードに responseHeader を持つ JSON ストリーム API をコールする。\n * fetchJsonRaw に加え、.result.responseHeader.status が 0 以外のときに例外を発生させる。\n * @param params 引数オブジェクト\n * @returns レスポンスペイロードのパース済み JSON オブジェクトの async generator\n */\nexport const fetchJsonStream = async function* (params) {\n    for await (const chunk of fetchRawJsonStream(params)) {\n        let status;\n        try {\n            status = chunk.result.responseHeader.status;\n        }\n        catch (e) {\n            throw new ApiResponseError('failed to get chunk.result.responseHeader.status');\n        }\n        if (status !== 0) {\n            throw new ApiCommonStatusError(`invalid status: ${status}`, chunk.result.responseHeader);\n        }\n        yield chunk;\n    }\n};\n/**\n * async generator を配列に変換する。\n * @param chunked async generator\n * @returns 配列\n */\nexport const streamToArray = async (chunked) => {\n    const result = [];\n    for await (const elem of chunked) {\n        result.push(elem);\n    }\n    return result;\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","ApiBaseError","Error","constructor","super","arguments","this","name","ApiDomError","message","options","ApiHttpStatusError","status","ApiAuthError","ApiResponseError","ApiStreamError","error","ApiCommonStatusError","responseHeader","TextLineStream","TransformStream","line","transform","chunk","controller","flush","allowCR","returnEmptyLines","mapperFun","lfIndex","indexOf","crIndex","length","curChunk","slice","crOrLfIndex","enqueue","doFetch","async","params","headers","req","method","resp","undefined","payload","body","JSON","stringify","authInfo","username","token","assign","abortSignal","signal","fetch","baseUrl","path","e","DOMException","ok","fetchRawJson","json","fetchRawJsonStream","reader","pipeThrough","TextDecoderStream","getReader","read","done","parsed","parse","value","fetchJson","fetchJsonStream","result","streamToArray","chunked","elem","push"],"sourceRoot":""}